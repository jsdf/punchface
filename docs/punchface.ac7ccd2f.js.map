{"version":3,"sources":["Vec3d.ts","Bounds.ts","GameObject.ts","assets.ts","Physics.ts","utils.ts","Player.ts","Background.ts","Input.ts","Vec2d.ts","View.ts","Game.ts","index.ts"],"names":[],"mappings":";AAEa,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAb,IAAA,EAAA,WAKE,SAAA,EAAY,GAJZ,KAAA,EAAY,EACZ,KAAA,EAAY,EACZ,KAAA,EAAY,EAGN,IACG,KAAA,EAAI,EAAK,EACT,KAAA,EAAI,EAAK,EACT,KAAA,EAAI,EAAK,GAuHpB,OAnHE,EAAA,UAAA,OAAA,WACO,KAAA,EAAI,EACJ,KAAA,EAAI,EACJ,KAAA,EAAI,GAGX,EAAA,UAAA,KAAA,SAAK,EAAW,EAAW,GACpB,KAAA,EAAI,EACJ,KAAA,EAAI,EACJ,KAAA,EAAI,GAGX,EAAA,UAAA,MAAA,WACS,OAAA,IAAI,EAAM,OAGnB,EAAA,UAAA,SAAA,SAAS,GAIA,OAHF,KAAA,EAAI,EAAM,EACV,KAAA,EAAI,EAAM,EACV,KAAA,EAAI,EAAM,EACR,MAGT,EAAA,UAAA,IAAA,SAAI,GAIK,OAHF,KAAA,GAAK,EAAM,EACX,KAAA,GAAK,EAAM,EACX,KAAA,GAAK,EAAM,EACT,MAGT,EAAA,UAAA,IAAA,SAAI,GAIK,OAHF,KAAA,GAAK,EAAM,EACX,KAAA,GAAK,EAAM,EACX,KAAA,GAAK,EAAM,EACT,MAGT,EAAA,UAAA,UAAA,WACM,GAAW,IAAX,KAAK,GAAsB,IAAX,KAAK,GAAsB,IAAX,KAAK,EAAS,OAAO,KAEnD,IAAA,EAAY,KAAK,KACrB,KAAK,EAAI,KAAK,EAAI,KAAK,EAAI,KAAK,EAAI,KAAK,EAAI,KAAK,GAK7C,OAHF,KAAA,GAAK,EACL,KAAA,GAAK,EACL,KAAA,GAAK,EACH,MAGT,EAAA,UAAA,UAAA,WACS,OAAA,KAAK,KAAK,KAAK,EAAI,KAAK,EAAI,KAAK,EAAI,KAAK,EAAI,KAAK,EAAI,KAAK,IAGrE,EAAA,UAAA,UAAA,SAAU,GAID,OAHF,KAAA,GAAK,EACL,KAAA,GAAK,EACL,KAAA,GAAK,EACH,MAGT,EAAA,UAAA,UAAA,SAAU,GAID,OAHF,KAAA,GAAK,EACL,KAAA,GAAK,EACL,KAAA,GAAK,EACH,MAGT,EAAA,UAAA,UAAA,SAAU,GAID,OAHF,KAAA,GAAK,EACL,KAAA,GAAK,EACL,KAAA,GAAK,EACH,MAGT,EAAA,UAAA,UAAA,SAAU,GAID,OAHF,KAAA,GAAK,EACL,KAAA,GAAK,EACL,KAAA,GAAK,EACH,MAGT,EAAA,UAAA,WAAA,SAAW,GACF,OAAA,KAAK,KACV,KAAA,IAAC,KAAK,EAAI,EAAM,EAAM,GACpB,KAAA,IAAC,KAAK,EAAI,EAAM,EAAM,GACtB,KAAA,IAAC,KAAK,EAAI,EAAM,EAAM,KAI5B,EAAA,UAAA,YAAA,SAAY,GACH,OAAA,IAAI,EAAM,GAAO,IAAI,MAAM,aAGpC,EAAA,UAAA,OAAA,WACS,MAAA,CACL,EAAG,KAAK,EACR,EAAG,KAAK,EACR,EAAG,KAAK,IAIZ,EAAA,UAAA,SAAA,WACS,MAAA,MAAM,KAAK,EAAE,QAAQ,GAAE,OAAO,KAAK,EAAE,QAAQ,GAAE,OAAO,KAAK,EAAE,QAClE,GACD,KAGH,EAAA,UAAA,OAAA,SAAO,GACE,OAAA,KAAK,IAAM,EAAM,GAAK,KAAK,IAAM,EAAM,GAAK,KAAK,IAAM,EAAM,GAItE,EAAA,UAAA,GAAA,WACS,MAAA,CAAC,EAAG,KAAK,EAAG,EAAG,KAAK,IAE/B,EAhIA,GAAa,QAAA,MAAA;;ACCA,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAb,IAAA,EAAA,WAIC,SAAA,EAAY,EAAK,GACX,KAAA,IAAM,EACN,KAAA,IAAM,EAWb,OARC,EAAA,UAAA,gBAAA,SAAgB,GACV,KAAA,IAAI,SAAS,GAAM,UAAU,GAC7B,KAAA,IAAI,SAAS,KAAK,KAAK,WAAW,IAGxC,EAAA,UAAA,MAAA,WACQ,OAAA,IAAI,EAAS,KAAK,IAAI,QAAS,KAAK,IAAI,UAEjD,EAjBA,GAAa,QAAA,SAAA;;ACGA,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IANb,IAAA,EAAA,QAAA,WACA,EAAA,QAAA,YAGI,EAAY,EAEhB,EAAA,WAAA,SAAA,IACC,KAAA,SAAW,IAAI,EAAA,MACf,KAAA,OAAS,IAAI,EAAA,SAAS,IAAI,EAAA,MAAS,IAAI,EAAA,OACvC,KAAA,GAAK,IACL,KAAA,OAAS,EA+BV,OA7BC,EAAA,UAAA,OAAA,SAAO,KAEP,EAAA,UAAA,OAAA,SAAO,EAAM,KACb,EAAA,UAAA,YAAA,SAAY,EAAM,GACX,IAAA,EAAY,EAAK,aAAa,MAEpC,EAAI,KAAO,oBACX,EAAI,UAAY,MAChB,EAAI,SACA,KAAK,WAAU,IAAI,KAAK,SAAS,WACpC,EAAU,EACV,EAAU,GAGL,IAAA,EAAU,KAAK,OAAO,IAAI,QAChC,EAAQ,EAAI,EACN,IAAA,EAAU,KAAK,OAAO,IAAI,QAChC,EAAQ,EAAI,EAEN,IAAA,EAAM,EAAK,KAAK,aAAa,KAAK,SAAS,QAAQ,IAAI,IACvD,EAAY,EAAK,KACrB,aAAa,KAAK,SAAS,QAAQ,IAAI,IACvC,IAAI,GACN,EAAI,WAAW,EAAI,EAAG,EAAI,EAAG,EAAU,EAAG,EAAU,IAGrD,EAAA,UAAA,SAAA,WACQ,MAAA,IAAI,KAAK,YAAY,KAAI,IAAI,KAAK,GAAE,KAE7C,EAnCA,GAAa,QAAA,WAAA;;;;;;;;;;;;;;;;;;;;;;;;ACqBA,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IA3BA,QAAA,OAAS,CACrB,MAAO,QAAQ,sBACf,MAAO,QAAQ,sBACf,MAAO,QAAQ,sBACf,MAAO,QAAQ,sBACf,MAAO,QAAQ,sBACf,MAAO,QAAQ,sBACf,MAAO,QAAQ,sBACf,MAAO,QAAQ,sBACf,OAAQ,QAAQ,uBAChB,OAAQ,QAAQ,uBAChB,OAAQ,QAAQ,wBAGJ,QAAA,SAAW,CACvB,QAAA,OAAO,MACP,QAAA,OAAO,MACP,QAAA,OAAO,MACP,QAAA,OAAO,OAEK,QAAA,SAAW,CACvB,QAAA,OAAO,MACP,QAAA,OAAO,MACP,QAAA,OAAO,MACP,QAAA,OAAO,OAGK,QAAA,UAAY,CAAC,QAAA,OAAO,OAAQ,QAAA,OAAO,OAAQ,QAAA,OAAO;;AC0FlD,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IArHb,IAAA,EAAA,QAAA,WAGM,EAAgB,EAAM,GACtB,EAAiB,EACjB,GAAiB,IAEnB,EAAY,EAEhB,EAAA,WAuBC,SAAA,EAAY,GAtBZ,KAAA,GAAK,IAKL,KAAA,SAAU,EACV,KAAA,aAAe,IAAI,EAAA,MAGnB,KAAA,SAAW,IAAI,EAAA,MAEf,KAAA,oBAAsB,IAAI,EAAA,MAG1B,KAAA,aAAe,IAAI,EAAA,MAEnB,KAAA,wBAA0B,IAAI,EAAA,MAE9B,KAAA,iBAAmB,IAAI,EAAA,MAKjB,KAAA,IAAM,EAAK,IACX,KAAA,KAAO,EAAK,KACZ,KAAA,YAAc,EAAM,EAAK,KACzB,KAAA,OAAS,EAAK,OACd,KAAA,cAAgB,KAAA,IAAA,EAAK,OAAU,GA6DtC,OA1DC,OAAA,eAAI,EAAA,UAAA,WAAQ,CAAZ,IAAA,WACQ,OAAA,KAAK,IAAI,UADL,YAAA,EA6EA,cAAA,IAzEZ,EAAA,UAAA,iCAAA,SAAiC,EAAY,GAOtC,IAAA,EAAc,IAAI,EAAA,MAGnB,KAAA,aAAa,UAAU,KAAK,aAC5B,KAAA,wBAA0B,KAAK,aAE/B,KAAA,aAAa,UAAU,GAGvB,KAAA,oBAAoB,IAAI,KAAK,cAG7B,KAAA,SAAS,SAAS,KAAK,qBACvB,KAAA,SAAS,UAAU,GAGnB,KAAA,SAAS,UAAU,GAGxB,EAAY,SAAS,KAAK,UAC1B,EAAY,IAAI,KAAK,UAGhB,KAAA,aAAa,SAAS,KAAK,UAC3B,KAAA,SAAS,SAAS,GAGlB,KAAA,iBAAiB,SAAS,KAAK,cAC/B,KAAA,aAAa,UAGnB,EAAA,UAAA,OAAA,WACO,IAAA,EAAU,IAAI,EAAA,MAAM,CACzB,EAAG,EACH,EAAG,EAAgB,KAAK,KACxB,EAAG,IAEC,KAAA,WAAW,IAGjB,EAAA,UAAA,WAAA,SAAW,GACL,KAAA,aAAa,IAAI,IAGvB,EAAA,UAAA,SAAA,WACQ,MAAA,IAAI,KAAK,YAAY,KAAI,IAAI,KAAK,GAAE,KAE7C,EAzFA,GA2FA,SAAS,EAAK,EAAM,GACf,EAAK,SAAS,EAAI,EAAK,OAAS,IACnC,EAAK,SAAS,EAAI,EAAM,EAAK,OAC7B,EAAK,oBAAoB,EAAI,GAG/B,SAAS,EAAO,EAAM,EAAa,GAC9B,EAAK,SAAS,EAAI,EAAK,OAAS,IACnC,EAAK,SAAS,EAAI,EAAM,EAAK,OAC7B,EAAK,oBAAoB,EAAI,GAE1B,EAAK,SAAS,EAAI,EAAK,OAAS,IACnC,EAAK,SAAS,EAAI,EAAM,EAAK,OAC7B,EAAK,oBAAoB,EAAI,GAxGlB,QAAA,SAAA,EA4Gb,IAAA,EAAA,WAAA,SAAA,IACC,KAAA,gBAAkB,EAClB,KAAA,MAAQ,EACR,KAAA,UAAY,IACZ,KAAA,eAAiB,EACjB,KAAA,UAAY,EACZ,KAAA,iBAAkB,EAClB,KAAA,OAA0B,GAC1B,KAAA,aAAe,IACf,KAAA,MAAQ,IACR,KAAA,MAAQ,GA6ET,OA3EC,EAAA,UAAA,gBAAA,SAAgB,EAAY,GACR,IAAA,IAAA,EAAA,EAAA,EAAA,KAAK,OAAL,EAAA,EAAA,OAAA,IAAa,EAArB,EAAI,EAAA,IACL,SACR,EAAK,OAAO,EAAI,GAGC,IAAA,IAAA,EAAA,EAAA,EAAA,KAAK,OAAL,EAAA,EAAA,OAAA,IAAa,EAArB,EAAI,EAAA,IACL,SACR,EAAK,iCAAiC,EAAI,GAMzB,IAAA,IAAA,EAAA,EAAA,EAAA,KAAK,OAAL,EAAA,EAAA,OAAA,IAAa,CAArB,IAAA,EACV,EADU,EAAI,EAAA,GACH,KAAK,aAChB,EAAO,EAAM,KAAK,KAAM,KAAK,QAI/B,EAAA,UAAA,KAAA,SAAK,GACA,IAAA,EAEA,EACA,EACA,EAcA,GAZc,GAAd,KAAK,QACH,KAAA,MAAQ,GAGd,EAAO,GAKP,GAHA,EAAO,KAAK,gBACT,EACA,KAAK,MAAQ,OAAS,KAAK,UAAY,KAAK,gBAChC,KAAK,OAGR,EAAK,CAEhB,GAAgB,KAEhB,EAAO,EAAM,KAAK,UAEb,KAAA,MAAQ,EAMT,KAAK,gBAAkB,EACrB,KAAA,gBAAkB,KAAK,gBAAkB,EAE9C,QAAQ,IACP,mEAKE,IAAA,EAAI,EAED,IADP,EAAW,EAAgB,KAAK,UACzB,KAAK,iBAAmB,GAAY,EAAI,GAAgB,CAEzD,KAAA,gBAAgB,EAAU,GAE1B,KAAA,gBAAkB,KAAK,gBAAkB,EAC9C,IAIA,SAIJ,EAvFA,GAAa,QAAA,QAAA;;AC5Fb,aAAA,SAAgB,IACT,IAAA,EAAS,SAAS,eAAe,YACnC,KAAE,aAAkB,mBACjB,MAAA,IAAI,MAAM,OAEV,OAAA,EALR,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAzBa,QAAA,SAAY,WAClB,IAAA,EAAQ,IAAI,IACX,OAAA,SAAC,GACH,GAAQ,KAAR,EAAA,CAGE,IAAA,EAAS,EAAM,IAAI,GACrB,GAAA,EACI,OAAA,EAAO,MAER,IAAA,EAA6C,CAAC,MAAO,MACrD,EAAQ,IAAI,MAUZ,OATN,EAAM,OAAS,WACd,EAAS,MAAQ,GAElB,EAAM,QAAU,WACT,MAAA,IAAI,MAAM,kBAAkB,IAEnC,EAAM,IAAM,EACZ,EAAM,IAAI,EAAK,GAET,OArBgB,GAyBzB,QAAA,UAAA;;AChBa,aAAA,IAAA,EAAA,MAAA,KAAA,WAAA,WAAA,IAAA,EAAA,SAAA,EAAA,GAAA,OAAA,EAAA,OAAA,gBAAA,CAAA,UAAA,cAAA,OAAA,SAAA,EAAA,GAAA,EAAA,UAAA,IAAA,SAAA,EAAA,GAAA,IAAA,IAAA,KAAA,EAAA,EAAA,eAAA,KAAA,EAAA,GAAA,EAAA,MAAA,EAAA,IAAA,OAAA,SAAA,EAAA,GAAA,SAAA,IAAA,KAAA,YAAA,EAAA,EAAA,EAAA,GAAA,EAAA,UAAA,OAAA,EAAA,OAAA,OAAA,IAAA,EAAA,UAAA,EAAA,UAAA,IAAA,IAAA,GAAA,EAAA,MAAA,KAAA,cAAA,SAAA,GAAA,GAAA,GAAA,EAAA,WAAA,OAAA,EAAA,IAAA,EAAA,GAAA,GAAA,MAAA,EAAA,IAAA,IAAA,KAAA,EAAA,OAAA,eAAA,KAAA,EAAA,KAAA,EAAA,GAAA,EAAA,IAAA,OAAA,EAAA,QAAA,EAAA,GAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IATb,IAAA,EAAA,QAAA,gBACA,EAAA,QAAA,YACA,EAAA,QAAA,WACA,EAAA,QAAA,aAEA,EAAA,EAAA,QAAA,YAEM,EAAiB,EAEvB,EAAA,SAAA,GAGC,SAAA,IAAA,IAAA,EACC,EAAA,KAAA,OAAO,KAJI,OACZ,EAAA,KAAO,EAAA,SACP,EAAA,SAAW,IAAI,EAAA,SAAS,CAAC,IAAK,EAAM,KAAM,IAAK,OAAQ,KAGtD,EAAK,SAAS,GAAK,IACnB,EAAK,OAAO,gBACX,IAAI,EAAA,MAAM,CACT,EAAG,IACH,EAAG,IACH,EAAG,MAVM,EA8Db,OA9D4B,EAAA,EAAA,GAe3B,EAAA,UAAA,WAAA,SAAW,GAET,OAAA,KAAK,SAAS,SAAS,EAAI,KAAK,SAAS,QACzC,EAAK,QAAQ,YAAc,MAI7B,EAAA,UAAA,OAAA,SAAO,GACA,IAAA,EAAW,EAAK,MAAM,UAAU,QACtC,EAAS,UAAU,GACb,IAAA,EAAW,KAAK,WAAW,GAC5B,IACJ,EAAS,EAAI,GAET,KAAA,SAAS,IAAI,GAEd,EAAK,MAAM,MACV,GACE,KAAA,SAAS,WACb,IAAI,EAAA,MAAM,CAAC,EAAG,EAAG,EAAG,IAAO,EAAG,IAAI,UACjC,KAAK,SAAS,OAMd,EAAK,MAAM,UAAU,YAAc,GAAK,EACtC,KAAA,KAAO,EAAA,SAEP,KAAA,KAAO,EAAA,UAId,EAAA,UAAA,OAAA,SAAO,EAAM,GACN,IAAA,EAAW,EAAM,SACtB,KAAK,KAAK,EAAK,YAAc,KAAK,KAAK,SAElC,EAAY,EAAK,aAAa,MAChC,GACH,EAAI,UACH,EAEA,EAAU,EAAI,EAAS,MAAQ,EAC/B,EAAU,EAAI,EAAS,OAAS,IAIpC,EA9DA,CAA4B,EAAA,YAAf,QAAA,OAAA;;ACJA,aAAA,IAAA,EAAA,MAAA,KAAA,WAAA,WAAA,IAAA,EAAA,SAAA,EAAA,GAAA,OAAA,EAAA,OAAA,gBAAA,CAAA,UAAA,cAAA,OAAA,SAAA,EAAA,GAAA,EAAA,UAAA,IAAA,SAAA,EAAA,GAAA,IAAA,IAAA,KAAA,EAAA,EAAA,eAAA,KAAA,EAAA,GAAA,EAAA,MAAA,EAAA,IAAA,OAAA,SAAA,EAAA,GAAA,SAAA,IAAA,KAAA,YAAA,EAAA,EAAA,EAAA,GAAA,EAAA,UAAA,OAAA,EAAA,OAAA,OAAA,IAAA,EAAA,UAAA,EAAA,UAAA,IAAA,IAAA,GAAA,EAAA,MAAA,KAAA,cAAA,SAAA,GAAA,GAAA,GAAA,EAAA,WAAA,OAAA,EAAA,IAAA,EAAA,GAAA,GAAA,MAAA,EAAA,IAAA,IAAA,KAAA,EAAA,OAAA,eAAA,KAAA,EAAA,KAAA,EAAA,GAAA,EAAA,IAAA,OAAA,EAAA,QAAA,EAAA,GAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IALb,IAAA,EAAA,QAAA,gBAGA,EAAA,EAAA,QAAA,YAEA,EAAA,SAAA,GAEC,SAAA,EAAY,GAAZ,IAAA,EACC,EAAA,KAAA,OAAO,KAHI,OAIX,EAAK,KAAO,EACZ,EAAK,QAAU,EAAA,EALJ,EAmBb,OAnBgC,EAAA,EAAA,GAQ/B,EAAA,UAAA,OAAA,SAAO,KAEP,EAAA,UAAA,OAAA,SAAO,EAAM,GACN,IAAA,EAAU,EAAM,SACrB,KAAK,KAAK,EAAK,YAAc,KAAK,KAAK,SAElC,EAAY,EAAK,aAAa,MAChC,GACH,EAAI,UAAU,EAAS,EAAU,EAAG,EAAU,IAGjD,EAnBA,CAAgC,EAAA,YAAnB,QAAA,WAAA;;ACHA,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAFb,IAAA,EAAA,QAAA,WAEA,EAAA,WAAA,SAAA,IACC,KAAA,SAAW,IAAI,IAEf,KAAA,cAAgB,IAAI,IACpB,KAAA,UAAY,IAAI,EAAA,MAChB,KAAA,MAAO,EAmCR,OAjCC,EAAA,UAAA,UAAA,SAAU,GACJ,KAAA,SAAS,IAAI,GACb,KAAA,cAAc,IAAI,IAGxB,EAAA,UAAA,QAAA,SAAQ,GACF,KAAA,SAAS,OAAO,GAChB,KAAA,cAAc,OAAO,IAG3B,EAAA,UAAA,OAAA,WACM,KAAA,UAAU,SACV,KAAA,MAAO,EAER,KAAK,SAAS,IAAI,OAChB,KAAA,UAAU,GAAK,GAEjB,KAAK,SAAS,IAAI,OAChB,KAAA,UAAU,IAAM,GAElB,KAAK,SAAS,IAAI,OAChB,KAAA,UAAU,GAAK,GAEjB,KAAK,SAAS,IAAI,OAChB,KAAA,UAAU,IAAM,IAGlB,KAAK,cAAc,IAAI,MAAQ,KAAK,cAAc,IAAI,QACpD,KAAA,MAAO,GAGR,KAAA,cAAc,SAErB,EAxCA,GAAa,QAAA,MAAA;;ACIA,aAJb,SAAS,EAAK,EAAI,EAAI,GACb,OAAA,GAAM,EAAI,GAAK,EAAK,EAGhB,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAb,IAAA,EAAA,WAIE,SAAA,EAAY,GAHZ,KAAA,EAAY,EACZ,KAAA,EAAY,EAGN,IACG,KAAA,EAAI,EAAK,EACT,KAAA,EAAI,EAAK,GA8HpB,OA1HE,EAAA,UAAA,MAAA,WACS,OAAA,IAAI,EAAM,OAGnB,EAAA,UAAA,SAAA,SAAS,GAGA,OAFF,KAAA,EAAI,EAAM,EACV,KAAA,EAAI,EAAM,EACR,MAGT,EAAA,UAAA,IAAA,SAAI,GAGK,OAFF,KAAA,GAAK,EAAM,EACX,KAAA,GAAK,EAAM,EACT,MAGT,EAAA,UAAA,IAAA,SAAI,GAGK,OAFF,KAAA,GAAK,EAAM,EACX,KAAA,GAAK,EAAM,EACT,MAGT,EAAA,UAAA,UAAA,WACM,GAAW,IAAX,KAAK,GAAsB,IAAX,KAAK,EAAS,OAAO,KAEnC,IAAA,EAAY,KAAK,KAAK,KAAK,EAAI,KAAK,EAAI,KAAK,EAAI,KAAK,GAGrD,OAFF,KAAA,GAAK,EACL,KAAA,GAAK,EACH,MAGT,EAAA,UAAA,UAAA,SAAU,GAGD,OAFF,KAAA,GAAK,EACL,KAAA,GAAK,EACH,MAGT,EAAA,UAAA,UAAA,SAAU,GAGD,OAFF,KAAA,GAAK,EACL,KAAA,GAAK,EACH,MAGT,EAAA,UAAA,UAAA,SAAU,GAGD,OAFF,KAAA,GAAK,EACL,KAAA,GAAK,EACH,MAGT,EAAA,UAAA,UAAA,SAAU,GAGD,OAFF,KAAA,GAAK,EACL,KAAA,GAAK,EACH,MAGT,EAAA,UAAA,WAAA,SAAW,GACF,OAAA,KAAK,KAAK,KAAA,IAAC,KAAK,EAAI,EAAM,EAAM,GAAI,KAAA,IAAC,KAAK,EAAI,EAAM,EAAM,KAGnE,EAAA,UAAA,YAAA,SAAY,GACH,OAAA,IAAI,EAAM,GAAO,IAAI,MAAM,aAGpC,EAAA,UAAA,KAAA,SAAK,EAAe,EAAe,GAG1B,OAFF,KAAA,EAAI,EAAK,EAAG,EAAG,EAAG,EAAG,GACrB,KAAA,EAAI,EAAK,EAAG,EAAG,EAAG,EAAG,GACnB,MAGT,EAAA,UAAA,MAAA,WACM,IAAA,EAAQ,KAAK,MAAM,KAAK,EAAG,KAAK,GAI7B,OAFH,EAAQ,IAAG,GAAS,EAAI,KAAK,IAE1B,GAGT,EAAA,UAAA,OAAA,WACS,MAAA,CACL,EAAG,KAAK,EACR,EAAG,KAAK,IAIZ,EAAA,UAAA,SAAA,WACS,MAAA,MAAM,KAAK,EAAC,OAAO,KAAK,EAAC,KAGlC,EAAA,UAAA,OAAA,SAAO,GACE,OAAA,KAAK,IAAM,EAAM,GAAK,KAAK,IAAM,EAAM,GAGzC,EAAA,sBAAP,SACE,EACA,GAEM,IAAA,EAAkB,IAAI,EACxB,EAAuB,KAEpB,OAAA,WACC,IAAA,EAAQ,IACV,OAAU,MAAV,GAAkB,EAAS,OAAO,GAC7B,GAEP,EAAS,SAAS,GAClB,EAAS,IAAI,EACb,EAAO,EAAO,GACP,KAKN,EAAA,uBAAP,SAA8B,GACxB,IAAA,EAAuB,KAEpB,OAAA,WAIE,OAHO,MAAV,IACF,EAAS,KAEJ,IAGb,EArIA,GAAa,QAAA,MAAA;;ACAA,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IANb,IAAA,EAAA,QAAA,WAIM,EAAQ,EAEd,EAAA,WAAA,SAAA,IAEE,KAAA,OAAS,IAAI,EAAA,MAuEf,OAtEE,EAAA,UAAA,SAAA,SAAS,GACA,OAAA,EACJ,QACA,UAAU,GACV,IAAI,KAAK,SAEd,EAAA,UAAA,WAAA,SAAW,GACF,OAAA,EACJ,QACA,IAAI,KAAK,QACT,UAAU,IAGf,EAAA,UAAA,aAAA,SAAa,GACL,IAAA,EAAM,KAAK,uBAAuB,GAEjC,OAAA,KAAK,SAAS,IAGvB,EAAA,UAAA,uBAAA,SAAuB,GACd,OAAA,IAAI,EAAA,MAAM,CACf,EAAG,KAAK,MAAM,EAAI,GAClB,GAAI,KAAK,MAAM,EAAI,EAAI,EAAI,EAAI,MAInC,EAAA,UAAA,OAAA,SAAO,EAAoB,EAAmB,GACtC,IAAA,EAAe,IAAI,EAAA,MAAM,KAAK,uBAAuB,IACtD,KAAA,OAAO,GAAK,EAAK,oCACpB,KAAK,OAAO,EACZ,EACA,EAAa,GAEV,KAAA,OAAO,GAAK,EAAK,oCACpB,KAAK,OAAO,EACZ,EACA,EAAa,IAIV,EAAA,oCAAP,SAEE,EACA,EACA,GAcM,IAAA,EAAqB,KAAK,MAC9B,GAAgB,EAAK,oBAAsB,MAEvC,EAAY,EAAS,EACrB,EAAY,EAAS,EAAe,EAEpC,EAAW,KAAK,IAAI,EAAY,EAAW,GAC3C,GAAY,KAAK,IAAI,EAAY,EAAW,GAG3C,OADoB,IAAb,EAAiB,EAAW,GArErC,EAAA,oBAAsB,GAwE/B,EAzEA,GAAa,QAAA,KAAA;;ACQA,aAAA,IAAA,EAAA,MAAA,KAAA,cAAA,SAAA,GAAA,GAAA,GAAA,EAAA,WAAA,OAAA,EAAA,IAAA,EAAA,GAAA,GAAA,MAAA,EAAA,IAAA,IAAA,KAAA,EAAA,OAAA,eAAA,KAAA,EAAA,KAAA,EAAA,GAAA,EAAA,IAAA,OAAA,EAAA,QAAA,EAAA,GAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAdb,IAAA,EAAA,QAAA,YACA,EAAA,QAAA,gBACA,EAAA,EAAA,QAAA,YACA,EAAA,QAAA,WAEA,EAAA,QAAA,aACA,EAAA,QAAA,UAEA,EAAA,QAAA,YAEM,EAAe,GACf,EAAS,EAAM,YACf,EAAQ,SAAS,eAAe,SAEtC,EAAA,WASC,SAAA,IARA,KAAA,gBAAkB,EAClB,KAAA,YAAc,EACd,KAAA,MAAQ,IAAI,EAAA,MACZ,KAAA,OAAS,IAAI,EAAA,OACb,KAAA,QAAU,IAAI,EAAA,QACd,KAAA,aAAkC,GAClC,KAAA,KAAO,IAAI,EAAA,KAGJ,IAAA,EAAa,IAAI,EAAA,WAAW,EAAA,WAClC,EAAW,SAAS,GAAK,GACpB,KAAA,QAAQ,OAAO,KAAK,KAAK,OAAO,UAChC,KAAA,aAAa,KAAK,KAAK,OAAQ,GAmDtC,OAhDC,EAAA,UAAA,OAAA,WAAA,IAAA,EAAA,KACO,EAAiB,YAAY,MAC9B,KAAA,MAAM,SAEN,KAAA,aAAa,QAAQ,SAAA,GAAO,OAAA,EAAI,OAAO,KAEvC,KAAA,QAAQ,KAAK,GACb,KAAA,KAAK,OAAO,KAAK,OAAO,SAAU,EAAO,MAAO,EAAO,SAG7D,EAAA,UAAA,OAAA,WAAA,IAAA,EAAA,KACO,EAAM,EAAO,WAAW,MAC1B,IAAC,EAAK,MAAM,IAAI,MAAM,+BAGtB,GADC,KAAA,kBACD,KAAK,gBAAkB,GAAK,EAA5B,CACC,KAAA,cAGL,EAAI,UAAY,QAChB,EAAI,SAAS,EAAG,EAAG,EAAO,MAAO,EAAO,QAElC,IAAA,EAAiB,KAAK,aAC1B,QACA,KAAK,SAAC,EAAG,GAAM,OAAA,EAAE,OAAS,EAAE,SAE9B,EAAe,QAAQ,SAAA,GAAO,OAAA,EAAI,OAAO,EAAM,KAC/C,EAAe,QAAQ,SAAA,GAAO,OAAA,EAAI,YAAY,EAAM,KAEhD,IACH,EAAM,YAAc,KAAK,UACxB,CACC,KAAM,KAAK,KAAK,OAChB,KAAM,CACL,IAAK,KAAK,OAAO,SAAS,SAC1B,IAAK,KAAK,OAAO,SAAS,oBAC1B,IAAK,KAAK,OAAO,SAAS,0BAG5B,KACA,MAKH,EAAA,UAAA,aAAA,SAAa,GACL,OAAA,KAAK,KAAK,aAAa,EAAI,WAEpC,EAhEA,GAAa,QAAA,KAAA;;ACaA,aAAA,IAAA,EAAA,MAAA,KAAA,cAAA,SAAA,GAAA,GAAA,GAAA,EAAA,WAAA,OAAA,EAAA,IAAA,EAAA,GAAA,GAAA,MAAA,EAAA,IAAA,IAAA,KAAA,EAAA,OAAA,eAAA,KAAA,EAAA,KAAA,EAAA,GAAA,EAAA,IAAA,OAAA,EAAA,QAAA,EAAA,GAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IA3Bb,IAAA,EAAA,QAAA,UAEA,EAAA,QAAA,YACA,EAAA,EAAA,QAAA,YAEA,OAAO,QAAQ,EAAA,QAAQ,QAAQ,SAAC,GAAC,EAAA,GAAA,IAAM,EAAA,EAAA,GAAS,OAAA,EAAM,SAAS,KAE/D,IAAM,EAAO,IAAI,EAAA,KAYjB,SAAS,IACR,sBAAsB,WACrB,EAAK,SACL,EAAK,SAEL,MAhBF,OAAO,KAAO,EAEd,SAAS,iBAAiB,UAAW,SAAA,GAC/B,EAAE,QACN,EAAK,MAAM,UAAU,EAAE,OAGzB,SAAS,iBAAiB,QAAS,SAAA,GAClC,EAAK,MAAM,QAAQ,EAAE,OAWtB","file":"punchface.ac7ccd2f.js","sourceRoot":"..","sourcesContent":["export type Vec3dInit = {x: number; y: number; z: number};\n\nexport class Vec3d {\n  x: number = 0;\n  y: number = 0;\n  z: number = 0;\n\n  constructor(init?: Vec3dInit) {\n    if (init) {\n      this.x = init.x;\n      this.y = init.y;\n      this.z = init.z;\n    }\n  }\n\n  origin() {\n    this.x = 0;\n    this.y = 0;\n    this.z = 0;\n  }\n\n  init(x: number, y: number, z: number) {\n    this.x = x;\n    this.y = y;\n    this.z = z;\n  }\n\n  clone() {\n    return new Vec3d(this);\n  }\n\n  copyFrom(other: Vec3dInit) {\n    this.x = other.x;\n    this.y = other.y;\n    this.z = other.z;\n    return this;\n  }\n\n  add(other: Vec3dInit) {\n    this.x += other.x;\n    this.y += other.y;\n    this.z += other.z;\n    return this;\n  }\n\n  sub(other: Vec3dInit) {\n    this.x -= other.x;\n    this.y -= other.y;\n    this.z -= other.z;\n    return this;\n  }\n\n  normalise() {\n    if (this.x === 0 && this.y === 0 && this.z === 0) return this;\n\n    const magnitude = Math.sqrt(\n      this.x * this.x + this.y * this.y + this.z * this.z\n    );\n    this.x /= magnitude;\n    this.y /= magnitude;\n    this.z /= magnitude;\n    return this;\n  }\n\n  magnitude() {\n    return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);\n  }\n\n  addScalar(scalar: number) {\n    this.x += scalar;\n    this.y += scalar;\n    this.z += scalar;\n    return this;\n  }\n\n  subScalar(scalar: number) {\n    this.x -= scalar;\n    this.y -= scalar;\n    this.z -= scalar;\n    return this;\n  }\n\n  mulScalar(scalar: number) {\n    this.x *= scalar;\n    this.y *= scalar;\n    this.z *= scalar;\n    return this;\n  }\n\n  divScalar(scalar: number) {\n    this.x /= scalar;\n    this.y /= scalar;\n    this.z /= scalar;\n    return this;\n  }\n\n  distanceTo(other: Vec3dInit) {\n    return Math.sqrt(\n      (this.x - other.x) ** 2 +\n        (this.y - other.y) ** 2 +\n        (this.z - other.z) ** 2\n    );\n  }\n\n  directionTo(other: Vec3dInit) {\n    return new Vec3d(other).sub(this).normalise();\n  }\n\n  toJSON() {\n    return {\n      x: this.x,\n      y: this.y,\n      z: this.z\n    };\n  }\n\n  toString() {\n    return `{x:${this.x.toFixed(2)}, y:${this.y.toFixed(2)}, z:${this.z.toFixed(\n      2\n    )}}`;\n  }\n\n  equals(other: Vec3dInit): boolean {\n    return this.x === other.x && this.y === other.y && this.z === other.z;\n  }\n\n  // return x+y components, which can be used to construct a Vec2d\n  xy() {\n    return {x: this.x, y: this.y};\n  }\n}\n","import {Vec2d} from \"./Vec2d\";\nimport {Vec3d} from \"./Vec3d\";\n\nexport class Bounds3d {\n\tmin: Vec3d;\n\tmax: Vec3d;\n\n\tconstructor(min, max) {\n\t\tthis.min = min;\n\t\tthis.max = max;\n\t}\n\n\tfromCenteredBox(size) {\n\t\tthis.max.copyFrom(size).divScalar(2);\n\t\tthis.min.copyFrom(this.max).mulScalar(-1);\n\t}\n\n\tclone() {\n\t\treturn new Bounds3d(this.min.clone(), this.max.clone());\n\t}\n}\n","import {Vec3d} from \"./Vec3d\";\nimport {Bounds3d} from \"./Bounds\";\nimport {Game} from \"./Game\";\n\nlet idCounter = 0;\n\nexport class GameObject {\n\tposition = new Vec3d();\n\tbounds = new Bounds3d(new Vec3d(), new Vec3d());\n\tid = idCounter++;\n\tzLayer = 0;\n\n\tupdate(game: Game) {}\n\n\trender(game, ctx) {}\n\trenderDebug(game, ctx) {\n\t\tconst screenPos = game.getScreenPos(this);\n\n\t\tctx.font = \"8px Lucida Grande\";\n\t\tctx.fillStyle = \"red\";\n\t\tctx.fillText(\n\t\t\t`${this.toString()} ${this.position.toString()}`,\n\t\t\tscreenPos.x,\n\t\t\tscreenPos.y\n\t\t);\n\n\t\tconst minFlat = this.bounds.min.clone();\n\t\tminFlat.z = 0;\n\t\tconst maxFlat = this.bounds.max.clone();\n\t\tmaxFlat.z = 0;\n\n\t\tconst min = game.view.getScreenPos(this.position.clone().add(minFlat));\n\t\tconst maxOffset = game.view\n\t\t\t.getScreenPos(this.position.clone().add(maxFlat))\n\t\t\t.sub(min);\n\t\tctx.strokeRect(min.x, min.y, maxOffset.x, maxOffset.y);\n\t}\n\n\ttoString() {\n\t\treturn `{${this.constructor.name}:${this.id}}`;\n\t}\n}\n","export const images = {\n\twalk1: require(\"./assets/walk1.png\"),\n\twalk2: require(\"./assets/walk2.png\"),\n\twalk3: require(\"./assets/walk3.png\"),\n\twalk4: require(\"./assets/walk4.png\"),\n\tidle1: require(\"./assets/idle1.png\"),\n\tidle2: require(\"./assets/idle2.png\"),\n\tidle3: require(\"./assets/idle3.png\"),\n\tidle4: require(\"./assets/idle4.png\"),\n\tsewer1: require(\"./assets/sewer1.png\"),\n\tsewer2: require(\"./assets/sewer2.png\"),\n\tsewer3: require(\"./assets/sewer3.png\")\n};\n\nexport const idleAnim = [\n\timages.idle1,\n\timages.idle2,\n\timages.idle3,\n\timages.idle4\n];\nexport const walkAnim = [\n\timages.walk1,\n\timages.walk2,\n\timages.walk3,\n\timages.walk4\n];\n\nexport const sewerAnim = [images.sewer1, images.sewer2, images.sewer3];\n","import {Vec3d} from \"./Vec3d\";\nimport {GameObject} from \"./GameObject\";\n\nconst PHYS_TIMESTEP = 1.0 / 60.0;\nconst PHYS_MAX_STEPS = 4;\nconst GRAVITY_FORCE = -300;\n\nlet idCounter = 0;\n\nexport class PhysBody {\n\tid = idCounter++;\n\tmass: number;\n\tmassInverse: number;\n\tradius: number;\n\tradiusSquared: number;\n\tenabled = true;\n\tprevPosition = new Vec3d();\n\t// in verlet this is derived.\n\t// after integration, it represents the velocity for dt\n\tvelocity = new Vec3d();\n\t// after integration, this represents the velocity for 1 second\n\tnonIntegralVelocity = new Vec3d();\n\t// this is really force (eg. in newtons) until after integration, when it\n\t// becomes acceleration\n\tacceleration = new Vec3d();\n\t// after integration, this represents the acceleration for 1 second\n\tnonIntegralAcceleration = new Vec3d();\n\t// this is the resultant acceleration from the 2x previous timestep\n\tprevAcceleration = new Vec3d();\n\tobj: GameObject;\n\t// position = new Vec3d();\n\n\tconstructor(opts: {obj: GameObject; mass: number; radius: number}) {\n\t\tthis.obj = opts.obj;\n\t\tthis.mass = opts.mass;\n\t\tthis.massInverse = 1.0 / opts.mass;\n\t\tthis.radius = opts.radius;\n\t\tthis.radiusSquared = opts.radius ** 2;\n\t}\n\n\tget position(): Vec3d {\n\t\treturn this.obj.position;\n\t}\n\n\tintegrateMotionSemiImplicitEuler(dt: number, drag: number) {\n\t\t// acceleration = force / mass\n\t\t// accelerationForDT = acceleration * dt\n\t\t// velocity = velocity + accelerationForDT\n\t\t// velocityForDT = velocity * dt\n\t\t// position = position + velocityForDT\n\n\t\tconst newPosition = new Vec3d();\n\t\t/* Scale force by mass to calculate actual acceleration */\n\t\t// acceleration = ( force / mass )\n\t\tthis.acceleration.mulScalar(this.massInverse);\n\t\tthis.nonIntegralAcceleration = this.acceleration; // for debugging\n\t\t// accelerationForDT = acceleration * dt\n\t\tthis.acceleration.mulScalar(dt);\n\n\t\t// velocity = velocity + accelerationForDT\n\t\tthis.nonIntegralVelocity.add(this.acceleration);\n\n\t\t// velocityForDT = velocity * dt\n\t\tthis.velocity.copyFrom(this.nonIntegralVelocity);\n\t\tthis.velocity.mulScalar(dt);\n\n\t\t/* Apply friction. */\n\t\tthis.velocity.mulScalar(drag);\n\n\t\t// position = position + velocityForDT;\n\t\tnewPosition.copyFrom(this.position);\n\t\tnewPosition.add(this.velocity);\n\n\t\t/* Store old position, update position to new position. */\n\t\tthis.prevPosition.copyFrom(this.position);\n\t\tthis.position.copyFrom(newPosition);\n\n\t\t/* Reset acceleration force. */\n\t\tthis.prevAcceleration.copyFrom(this.acceleration);\n\t\tthis.acceleration.origin();\n\t}\n\n\tupdate() {\n\t\tconst gravity = new Vec3d({\n\t\t\tx: 0,\n\t\t\ty: GRAVITY_FORCE * this.mass,\n\t\t\tz: 0\n\t\t});\n\t\tthis.applyForce(gravity); // apply gravity\n\t}\n\n\tapplyForce(force: Vec3d) {\n\t\tthis.acceleration.add(force);\n\t}\n\n\ttoString() {\n\t\treturn `{${this.constructor.name}:${this.id}}`;\n\t}\n}\n\nfunction yMin(body, min: number) {\n\tif (body.position.y - body.radius < min) {\n\t\tbody.position.y = min + body.radius;\n\t\tbody.nonIntegralVelocity.y = 0;\n\t}\n}\nfunction zClamp(body, min: number, max: number) {\n\tif (body.position.z - body.radius < min) {\n\t\tbody.position.z = min + body.radius;\n\t\tbody.nonIntegralVelocity.z = 0;\n\t}\n\tif (body.position.z + body.radius > max) {\n\t\tbody.position.z = max - body.radius;\n\t\tbody.nonIntegralVelocity.z = 0;\n\t}\n}\n\nexport class Physics {\n\taccumulatedTime = 0.0;\n\tclock = 0.0;\n\tviscosity = 0.01;\n\tsimulationRate = 1.0;\n\ttimeScale = 1.0;\n\tdynamicTimestep = true;\n\tbodies: Array<PhysBody> = [];\n\tfloorHeight = -100;\n\tzMin = -235;\n\tzMax = -25;\n\n\tintegrateBodies(dt: number, drag: number) {\n\t\tfor (const body of this.bodies) {\n\t\t\tif (body.enabled) {\n\t\t\t\tbody.update(dt, drag);\n\t\t\t}\n\t\t}\n\t\tfor (const body of this.bodies) {\n\t\t\tif (body.enabled /*&& !body.controlled*/) {\n\t\t\t\tbody.integrateMotionSemiImplicitEuler(dt, drag);\n\t\t\t}\n\t\t}\n\n\t\t// do this after so we can fix any world penetration resulting from motion\n\t\t// integration\n\t\tfor (const body of this.bodies) {\n\t\t\tyMin(body, this.floorHeight);\n\t\t\tzClamp(body, this.zMin, this.zMax);\n\t\t}\n\t}\n\n\tstep(now: number) {\n\t\tlet time;\n\t\tlet i;\n\t\tlet timestep;\n\t\tlet delta;\n\t\tlet drag;\n\t\t// Initialise the clock on first step.\n\t\tif (this.clock == 0.0) {\n\t\t\tthis.clock = now;\n\t\t}\n\t\t// Compute delta time since last step.\n\t\ttime = now;\n\t\t// fixed delta for debugging\n\t\ttime = this.dynamicTimestep\n\t\t\t? time\n\t\t\t: this.clock + 16.667 * this.timeScale * this.simulationRate;\n\t\tdelta = time - this.clock;\n\t\t// sufficient change.\n\n\t\tif (delta > 0.0) {\n\t\t\t// Convert time to seconds.\n\t\t\tdelta = delta * 0.001;\n\t\t\t// Drag is inversely proportional to viscosity.\n\t\t\tdrag = 1.0 - this.viscosity;\n\t\t\t// Update the clock.\n\t\t\tthis.clock = time;\n\t\t\t// Increment time accumulatedTime.\n\t\t\t// Don't accumulate any additional time if we're already more than 1 second\n\t\t\t// behind. This happens when the tab is backgrounded, and if this grows\n\t\t\t// large enough we won't be able to ever catch up.\n\n\t\t\tif (this.accumulatedTime < 1.0) {\n\t\t\t\tthis.accumulatedTime = this.accumulatedTime + delta;\n\t\t\t} else {\n\t\t\t\tconsole.log(\n\t\t\t\t\t\"physics: accumulated too much time, not accumulating any more\\n\"\n\t\t\t\t);\n\t\t\t}\n\t\t\t// Integrate until the accumulatedTime is empty or until the\n\t\t\t// maximum amount of iterations per step is reached.\n\t\t\tlet i = 0;\n\t\t\ttimestep = PHYS_TIMESTEP * this.timeScale;\n\t\t\twhile (this.accumulatedTime >= timestep && i < PHYS_MAX_STEPS) {\n\t\t\t\t// Integrate bodies by fixed timestep.\n\t\t\t\tthis.integrateBodies(timestep, drag);\n\t\t\t\t/* Reduce accumulatedTime by one timestep. */\n\t\t\t\tthis.accumulatedTime = this.accumulatedTime - timestep;\n\t\t\t\ti++;\n\n\t\t\t\t// TODO: updating physics step multiple times without running game update\n\t\t\t\t// step is probably wrong, as forces are reset after each step\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n}\n","export const getImage = (() => {\n\tconst cache = new Map();\n\treturn (url: string) => {\n\t\tif (url === \"\") {\n\t\t\treturn;\n\t\t}\n\t\tconst cached = cache.get(url);\n\t\tif (cached) {\n\t\t\treturn cached.image;\n\t\t} else {\n\t\t\tconst imageRef: {image: HTMLImageElement | null} = {image: null};\n\t\t\tconst image = new Image();\n\t\t\timage.onload = () => {\n\t\t\t\timageRef.image = image;\n\t\t\t};\n\t\t\timage.onerror = () => {\n\t\t\t\tthrow new Error(`failed to load ${url}`);\n\t\t\t};\n\t\t\timage.src = url;\n\t\t\tcache.set(url, imageRef);\n\t\t}\n\t\treturn null;\n\t};\n})();\n\nexport function getCanvas(): HTMLCanvasElement {\n\tconst canvas = document.getElementById(\"viewport\");\n\tif (!(canvas instanceof HTMLCanvasElement)) {\n\t\tthrow new Error(\"die\");\n\t}\n\treturn canvas;\n}\n","import {GameObject} from \"./GameObject\";\nimport {idleAnim, walkAnim} from \"./assets\";\nimport {Vec3d} from \"./Vec3d\";\nimport {PhysBody} from \"./Physics\";\n\nimport * as utils from \"./utils\";\n\nconst MOVEMENT_SPEED = 1;\n\nexport class Player extends GameObject {\n\tanim = idleAnim;\n\tphysBody = new PhysBody({obj: this, mass: 200, radius: 50});\n\tconstructor() {\n\t\tsuper();\n\t\tthis.position.y = -600;\n\t\tthis.bounds.fromCenteredBox(\n\t\t\tnew Vec3d({\n\t\t\t\tx: 118,\n\t\t\t\ty: 116,\n\t\t\t\tz: 50\n\t\t\t})\n\t\t);\n\t}\n\n\tisOnGround(game) {\n\t\treturn (\n\t\t\tthis.physBody.position.y - this.physBody.radius <=\n\t\t\tgame.physics.floorHeight + 0.001\n\t\t);\n\t}\n\n\tupdate(game) {\n\t\tconst movement = game.input.direction.clone();\n\t\tmovement.mulScalar(MOVEMENT_SPEED);\n\t\tconst onGround = this.isOnGround(game);\n\t\tif (!onGround) {\n\t\t\tmovement.z = 0;\n\t\t}\n\t\tthis.position.add(movement);\n\n\t\tif (game.input.jump) {\n\t\t\tif (onGround) {\n\t\t\t\tthis.physBody.applyForce(\n\t\t\t\t\tnew Vec3d({x: 0, y: 10000, z: 0}).mulScalar(\n\t\t\t\t\t\tthis.physBody.mass\n\t\t\t\t\t)\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\tif (game.input.direction.magnitude() > 0 && onGround) {\n\t\t\tthis.anim = walkAnim;\n\t\t} else {\n\t\t\tthis.anim = idleAnim;\n\t\t}\n\t}\n\n\trender(game, ctx) {\n\t\tconst guyImage = utils.getImage(\n\t\t\tthis.anim[game.frameNumber % this.anim.length]\n\t\t);\n\t\tconst screenPos = game.getScreenPos(this);\n\t\tif (guyImage) {\n\t\t\tctx.drawImage(\n\t\t\t\tguyImage,\n\n\t\t\t\tscreenPos.x - guyImage.width / 2,\n\t\t\t\tscreenPos.y - guyImage.height / 2\n\t\t\t);\n\t\t}\n\t}\n}\n","import {GameObject} from \"./GameObject\";\nimport {Vec3d} from \"./Vec3d\";\n\nimport * as utils from \"./utils\";\n\nexport class Background extends GameObject {\n\tanim: Array<string>;\n\tconstructor(anim) {\n\t\tsuper();\n\t\tthis.anim = anim;\n\t\tthis.zLayer = -Infinity;\n\t}\n\n\tupdate(game) {}\n\n\trender(game, ctx) {\n\t\tconst bgImage = utils.getImage(\n\t\t\tthis.anim[game.frameNumber % this.anim.length]\n\t\t);\n\t\tconst screenPos = game.getScreenPos(this);\n\t\tif (bgImage) {\n\t\t\tctx.drawImage(bgImage, screenPos.x, screenPos.y);\n\t\t}\n\t}\n}\n","import {Vec3d} from \"./Vec3d\";\n\nexport class Input {\n\tkeysDown = new Set();\n\t// keys newly pressed this frame\n\tkeysTriggered = new Set();\n\tdirection = new Vec3d();\n\tjump = false;\n\n\tonKeyDown(key) {\n\t\tthis.keysDown.add(key);\n\t\tthis.keysTriggered.add(key);\n\t}\n\n\tonKeyUp(key) {\n\t\tthis.keysDown.delete(key);\n\t\tthis.keysTriggered.delete(key);\n\t}\n\n\tupdate() {\n\t\tthis.direction.origin();\n\t\tthis.jump = false;\n\n\t\tif (this.keysDown.has(\"d\")) {\n\t\t\tthis.direction.x += 1;\n\t\t}\n\t\tif (this.keysDown.has(\"a\")) {\n\t\t\tthis.direction.x += -1;\n\t\t}\n\t\tif (this.keysDown.has(\"w\")) {\n\t\t\tthis.direction.z += 1;\n\t\t}\n\t\tif (this.keysDown.has(\"s\")) {\n\t\t\tthis.direction.z += -1;\n\t\t}\n\n\t\tif (this.keysTriggered.has(\"c\") || this.keysTriggered.has(\"n\")) {\n\t\t\tthis.jump = true;\n\t\t}\n\n\t\tthis.keysTriggered.clear();\n\t}\n}\n","export type Vec2dInit = {x: number; y: number};\n\nfunction lerp(v0, v1, t) {\n  return v0 * (1 - t) + v1 * t;\n}\n\nexport class Vec2d {\n  x: number = 0;\n  y: number = 0;\n\n  constructor(init?: Vec2dInit) {\n    if (init) {\n      this.x = init.x;\n      this.y = init.y;\n    }\n  }\n\n  clone() {\n    return new Vec2d(this);\n  }\n\n  copyFrom(other: Vec2dInit) {\n    this.x = other.x;\n    this.y = other.y;\n    return this;\n  }\n\n  add(other: Vec2dInit) {\n    this.x += other.x;\n    this.y += other.y;\n    return this;\n  }\n\n  sub(other: Vec2dInit) {\n    this.x -= other.x;\n    this.y -= other.y;\n    return this;\n  }\n\n  normalise() {\n    if (this.x === 0 && this.y === 0) return this;\n\n    const magnitude = Math.sqrt(this.x * this.x + this.y * this.y);\n    this.x /= magnitude;\n    this.y /= magnitude;\n    return this;\n  }\n\n  addScalar(scalar: number) {\n    this.x += scalar;\n    this.y += scalar;\n    return this;\n  }\n\n  subScalar(scalar: number) {\n    this.x -= scalar;\n    this.y -= scalar;\n    return this;\n  }\n\n  mulScalar(scalar: number) {\n    this.x *= scalar;\n    this.y *= scalar;\n    return this;\n  }\n\n  divScalar(scalar: number) {\n    this.x /= scalar;\n    this.y /= scalar;\n    return this;\n  }\n\n  distanceTo(other: Vec2dInit) {\n    return Math.sqrt((this.x - other.x) ** 2 + (this.y - other.y) ** 2);\n  }\n\n  directionTo(other: Vec2dInit) {\n    return new Vec2d(other).sub(this).normalise();\n  }\n\n  lerp(v0: Vec2dInit, v1: Vec2dInit, t: number) {\n    this.x = lerp(v0.x, v1.x, t);\n    this.y = lerp(v0.y, v1.y, t);\n    return this;\n  }\n\n  angle() {\n    let angle = Math.atan2(this.y, this.x);\n\n    if (angle < 0) angle += 2 * Math.PI;\n\n    return angle;\n  }\n\n  toJSON() {\n    return {\n      x: this.x,\n      y: this.y\n    };\n  }\n\n  toString() {\n    return `{x:${this.x}, y:${this.y}}`;\n  }\n\n  equals(other: Vec2dInit): boolean {\n    return this.x === other.x && this.y === other.y;\n  }\n\n  static memoizedOneArgDeriver(\n    getInput: () => Vec2d,\n    derive: (input: Vec2d, result: Vec2d) => void\n  ): () => Vec2d {\n    const cacheKey: Vec2d = new Vec2d();\n    let cached: Vec2d | null = null;\n\n    return () => {\n      const input = getInput();\n      if (cached != null && cacheKey.equals(input)) {\n        return cached;\n      } else {\n        cacheKey.copyFrom(input);\n        cached = new Vec2d();\n        derive(input, cached);\n        return cached;\n      }\n    };\n  }\n\n  static memoizedZeroArgDeriver(derive: () => Vec2d) {\n    let result: Vec2d | null = null;\n\n    return () => {\n      if (result == null) {\n        result = derive();\n      }\n      return result;\n    };\n  }\n}\n","import {Vec2d} from \"./Vec2d\";\nimport {Vec3d} from \"./Vec3d\";\nimport {GameObject} from \"./GameObject\";\n\nconst SCALE = 1;\n\nexport class View {\n  static VIEWBOX_PADDING_PCT = 20;\n  offset = new Vec2d();\n  toScreen(v: Vec2d) {\n    return v\n      .clone()\n      .mulScalar(SCALE)\n      .sub(this.offset);\n  }\n  fromScreen(v: Vec2d) {\n    return v\n      .clone()\n      .add(this.offset)\n      .divScalar(SCALE);\n  }\n\n  getScreenPos(pos: Vec3d) {\n    const rel = this.getScreenSpacePosition(pos);\n    // apply scrolling\n    return this.toScreen(rel);\n  }\n\n  getScreenSpacePosition(pos: Vec3d) {\n    return new Vec2d({\n      x: Math.floor(pos.x),\n      y: -Math.floor(pos.y + pos.z / 2)\n    });\n  }\n\n  update(playerPos3d: Vec3d, viewWidth: number, viewHeight: number) {\n    const playerPosScr = new Vec2d(this.getScreenSpacePosition(playerPos3d));\n    this.offset.x += View.calculateViewAdjustmentForDimension(\n      this.offset.x,\n      viewWidth,\n      playerPosScr.x\n    );\n    this.offset.y += View.calculateViewAdjustmentForDimension(\n      this.offset.y,\n      viewHeight,\n      playerPosScr.y\n    );\n  }\n\n  static calculateViewAdjustmentForDimension(\n    // arguments are scalar values along the relevant dimension\n    offset: number,\n    viewportSize: number,\n    playerPos: number\n  ) {\n    /*\n        plr\n      box|\n   scr | |\n    |  | |   \n    v  v |   \n    |  | v   \n    |  | x   \n \n    boxAbs = scrOff+boxRel\n    if (plr - boxAbs < 0), scrOff -= plr - boxAbs\n     */\n    const percentPaddingSize = Math.floor(\n      viewportSize * (View.VIEWBOX_PADDING_PCT / 100)\n    );\n    const boxMinAbs = offset + percentPaddingSize;\n    const boxMaxAbs = offset + viewportSize - percentPaddingSize;\n\n    const deltaMin = Math.min(playerPos - boxMinAbs, 0);\n    const deltaMax = -Math.min(boxMaxAbs - playerPos, 0);\n\n    const delta = deltaMin === 0 ? deltaMax : deltaMin;\n    return delta;\n  }\n}\n","import {Player} from \"./Player\";\nimport {Background} from \"./Background\";\nimport * as utils from \"./utils\";\nimport {Input} from \"./Input\";\nimport {GameObject} from \"./GameObject\";\nimport {Physics} from \"./Physics\";\nimport {View} from \"./View\";\nimport {Vec2d} from \"./Vec2d\";\nimport {sewerAnim} from \"./assets\";\n\nconst PX_PER_METRE = 50;\nconst canvas = utils.getCanvas();\nconst debug = document.getElementById(\"debug\");\n\nexport class Game {\n\trealFrameNumber = 0;\n\tframeNumber = 0;\n\tinput = new Input();\n\tplayer = new Player();\n\tphysics = new Physics();\n\tworldObjects: Array<GameObject> = [];\n\tview = new View();\n\n\tconstructor() {\n\t\tconst background = new Background(sewerAnim);\n\t\tbackground.position.x = -90;\n\t\tthis.physics.bodies.push(this.player.physBody);\n\t\tthis.worldObjects.push(this.player, background);\n\t}\n\n\tupdate() {\n\t\tconst frameStartTime = performance.now();\n\t\tthis.input.update();\n\n\t\tthis.worldObjects.forEach(obj => obj.update(this));\n\n\t\tthis.physics.step(frameStartTime);\n\t\tthis.view.update(this.player.position, canvas.width, canvas.height);\n\t}\n\n\trender() {\n\t\tconst ctx = canvas.getContext(\"2d\");\n\t\tif (!ctx) throw new Error(\"couldn't get canvas context\");\n\n\t\tthis.realFrameNumber++;\n\t\tif (this.realFrameNumber % 4 != 0) return;\n\t\tthis.frameNumber++;\n\n\t\t// clear\n\t\tctx.fillStyle = \"white\";\n\t\tctx.fillRect(0, 0, canvas.width, canvas.height);\n\n\t\tconst zSortedObjects = this.worldObjects\n\t\t\t.slice()\n\t\t\t.sort((a, b) => a.zLayer - b.zLayer);\n\n\t\tzSortedObjects.forEach(obj => obj.render(this, ctx));\n\t\tzSortedObjects.forEach(obj => obj.renderDebug(this, ctx));\n\n\t\tif (debug) {\n\t\t\tdebug.textContent = JSON.stringify(\n\t\t\t\t{\n\t\t\t\t\tview: this.view.offset,\n\t\t\t\t\tphys: {\n\t\t\t\t\t\tpos: this.player.physBody.position,\n\t\t\t\t\t\tvel: this.player.physBody.nonIntegralVelocity,\n\t\t\t\t\t\tacc: this.player.physBody.nonIntegralAcceleration\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tnull,\n\t\t\t\t2\n\t\t\t);\n\t\t}\n\t}\n\n\tgetScreenPos(obj: GameObject) {\n\t\treturn this.view.getScreenPos(obj.position);\n\t}\n}\n","import {Game} from \"./Game\";\n\nimport {images} from \"./assets\";\nimport * as utils from \"./utils\";\n\nObject.entries(images).forEach(([name, url]) => utils.getImage(url));\n\nconst game = new Game();\nwindow.game = game;\n\ndocument.addEventListener(\"keydown\", e => {\n\tif (!e.repeat) {\n\t\tgame.input.onKeyDown(e.key);\n\t}\n});\ndocument.addEventListener(\"keyup\", e => {\n\tgame.input.onKeyUp(e.key);\n});\n\nfunction animationLoop() {\n\trequestAnimationFrame(() => {\n\t\tgame.update();\n\t\tgame.render();\n\n\t\tanimationLoop();\n\t});\n}\nanimationLoop();\n"]}